// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ib/ffi/compute/v3_3_0/compute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ib {
namespace ffi {
namespace compute {
namespace v3_3_0 {

namespace {

const ::google::protobuf::Descriptor* FullSweepArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullSweepArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullSweepResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullSweepResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssayConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssayConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuantitatedSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuantitatedSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuantitatedCompound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuantitatedCompound_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuantitatedChromatogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuantitatedChromatogram_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvertedSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvertedSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvertedChromatogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvertedChromatogram_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto() {
  protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ib/ffi/compute/v3_3_0/compute.proto");
  GOOGLE_CHECK(file != NULL);
  FullSweepArgs_descriptor_ = file->message_type(0);
  static const int FullSweepArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullSweepArgs, assayconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullSweepArgs, convertedsamples_),
  };
  FullSweepArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullSweepArgs_descriptor_,
      FullSweepArgs::default_instance_,
      FullSweepArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullSweepArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullSweepArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullSweepArgs));
  FullSweepResult_descriptor_ = file->message_type(1);
  static const int FullSweepResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullSweepResult, quantitatedsamples_),
  };
  FullSweepResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullSweepResult_descriptor_,
      FullSweepResult::default_instance_,
      FullSweepResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullSweepResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullSweepResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullSweepResult));
  AssayConfiguration_descriptor_ = file->message_type(2);
  static const int AssayConfiguration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssayConfiguration, name_),
  };
  AssayConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssayConfiguration_descriptor_,
      AssayConfiguration::default_instance_,
      AssayConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssayConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssayConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssayConfiguration));
  QuantitatedSample_descriptor_ = file->message_type(3);
  static const int QuantitatedSample_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedSample, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedSample, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedSample, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedSample, quantitatedcompounds_),
  };
  QuantitatedSample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuantitatedSample_descriptor_,
      QuantitatedSample::default_instance_,
      QuantitatedSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedSample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedSample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuantitatedSample));
  QuantitatedCompound_descriptor_ = file->message_type(4);
  static const int QuantitatedCompound_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedCompound, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedCompound, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedCompound, quantitatedchromatograms_),
  };
  QuantitatedCompound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuantitatedCompound_descriptor_,
      QuantitatedCompound::default_instance_,
      QuantitatedCompound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedCompound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedCompound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuantitatedCompound));
  QuantitatedChromatogram_descriptor_ = file->message_type(5);
  static const int QuantitatedChromatogram_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedChromatogram, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedChromatogram, name_),
  };
  QuantitatedChromatogram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuantitatedChromatogram_descriptor_,
      QuantitatedChromatogram::default_instance_,
      QuantitatedChromatogram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedChromatogram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuantitatedChromatogram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuantitatedChromatogram));
  ConvertedSample_descriptor_ = file->message_type(6);
  static const int ConvertedSample_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedSample, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedSample, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedSample, convertedchromatograms_),
  };
  ConvertedSample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvertedSample_descriptor_,
      ConvertedSample::default_instance_,
      ConvertedSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedSample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedSample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvertedSample));
  ConvertedChromatogram_descriptor_ = file->message_type(7);
  static const int ConvertedChromatogram_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedChromatogram, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedChromatogram, precursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedChromatogram, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedChromatogram, polarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedChromatogram, collisionenergy_),
  };
  ConvertedChromatogram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvertedChromatogram_descriptor_,
      ConvertedChromatogram::default_instance_,
      ConvertedChromatogram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedChromatogram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertedChromatogram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvertedChromatogram));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullSweepArgs_descriptor_, &FullSweepArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullSweepResult_descriptor_, &FullSweepResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssayConfiguration_descriptor_, &AssayConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuantitatedSample_descriptor_, &QuantitatedSample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuantitatedCompound_descriptor_, &QuantitatedCompound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuantitatedChromatogram_descriptor_, &QuantitatedChromatogram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvertedSample_descriptor_, &ConvertedSample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvertedChromatogram_descriptor_, &ConvertedChromatogram::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto() {
  delete FullSweepArgs::default_instance_;
  delete FullSweepArgs_reflection_;
  delete FullSweepResult::default_instance_;
  delete FullSweepResult_reflection_;
  delete AssayConfiguration::default_instance_;
  delete AssayConfiguration_reflection_;
  delete QuantitatedSample::default_instance_;
  delete QuantitatedSample_reflection_;
  delete QuantitatedCompound::default_instance_;
  delete QuantitatedCompound_reflection_;
  delete QuantitatedChromatogram::default_instance_;
  delete QuantitatedChromatogram_reflection_;
  delete ConvertedSample::default_instance_;
  delete ConvertedSample_reflection_;
  delete ConvertedChromatogram::default_instance_;
  delete ConvertedChromatogram_reflection_;
}

void protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#ib/ffi/compute/v3_3_0/compute.proto\022\025i"
    "b.ffi.compute.v3_3_0\"\221\001\n\rFullSweepArgs\022>"
    "\n\013assayConfig\030\001 \002(\0132).ib.ffi.compute.v3_"
    "3_0.AssayConfiguration\022@\n\020convertedSampl"
    "es\030\002 \003(\0132&.ib.ffi.compute.v3_3_0.Convert"
    "edSample\"W\n\017FullSweepResult\022D\n\022quantitat"
    "edSamples\030\001 \003(\0132(.ib.ffi.compute.v3_3_0."
    "QuantitatedSample\"\"\n\022AssayConfiguration\022"
    "\014\n\004name\030\001 \002(\t\"\212\001\n\021QuantitatedSample\022\n\n\002i"
    "d\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\021\n\tunique_id\030\003 \002(\t"
    "\022H\n\024quantitatedCompounds\030\004 \003(\0132*.ib.ffi."
    "compute.v3_3_0.QuantitatedCompound\"\201\001\n\023Q"
    "uantitatedCompound\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002"
    " \002(\t\022P\n\030quantitatedChromatograms\030\003 \003(\0132."
    ".ib.ffi.compute.v3_3_0.QuantitatedChroma"
    "togram\"3\n\027QuantitatedChromatogram\022\n\n\002id\030"
    "\001 \002(\t\022\014\n\004name\030\002 \002(\t\"~\n\017ConvertedSample\022\n"
    "\n\002id\030\001 \002(\t\022\021\n\tunique_id\030\002 \002(\t\022L\n\026convert"
    "edChromatograms\030\003 \003(\0132,.ib.ffi.compute.v"
    "3_3_0.ConvertedChromatogram\"r\n\025Converted"
    "Chromatogram\022\n\n\002id\030\001 \002(\t\022\021\n\tprecursor\030\002 "
    "\001(\001\022\017\n\007product\030\003 \002(\001\022\020\n\010polarity\030\004 \002(\t\022\027"
    "\n\017collisionEnergy\030\005 \001(\001", 903);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ib/ffi/compute/v3_3_0/compute.proto", &protobuf_RegisterTypes);
  FullSweepArgs::default_instance_ = new FullSweepArgs();
  FullSweepResult::default_instance_ = new FullSweepResult();
  AssayConfiguration::default_instance_ = new AssayConfiguration();
  QuantitatedSample::default_instance_ = new QuantitatedSample();
  QuantitatedCompound::default_instance_ = new QuantitatedCompound();
  QuantitatedChromatogram::default_instance_ = new QuantitatedChromatogram();
  ConvertedSample::default_instance_ = new ConvertedSample();
  ConvertedChromatogram::default_instance_ = new ConvertedChromatogram();
  FullSweepArgs::default_instance_->InitAsDefaultInstance();
  FullSweepResult::default_instance_->InitAsDefaultInstance();
  AssayConfiguration::default_instance_->InitAsDefaultInstance();
  QuantitatedSample::default_instance_->InitAsDefaultInstance();
  QuantitatedCompound::default_instance_->InitAsDefaultInstance();
  QuantitatedChromatogram::default_instance_->InitAsDefaultInstance();
  ConvertedSample::default_instance_->InitAsDefaultInstance();
  ConvertedChromatogram::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto {
  StaticDescriptorInitializer_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto() {
    protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();
  }
} static_descriptor_initializer_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FullSweepArgs::kAssayConfigFieldNumber;
const int FullSweepArgs::kConvertedSamplesFieldNumber;
#endif  // !_MSC_VER

FullSweepArgs::FullSweepArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FullSweepArgs::InitAsDefaultInstance() {
  assayconfig_ = const_cast< ::ib::ffi::compute::v3_3_0::AssayConfiguration*>(&::ib::ffi::compute::v3_3_0::AssayConfiguration::default_instance());
}

FullSweepArgs::FullSweepArgs(const FullSweepArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FullSweepArgs::SharedCtor() {
  _cached_size_ = 0;
  assayconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullSweepArgs::~FullSweepArgs() {
  SharedDtor();
}

void FullSweepArgs::SharedDtor() {
  if (this != default_instance_) {
    delete assayconfig_;
  }
}

void FullSweepArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullSweepArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullSweepArgs_descriptor_;
}

const FullSweepArgs& FullSweepArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();  return *default_instance_;
}

FullSweepArgs* FullSweepArgs::default_instance_ = NULL;

FullSweepArgs* FullSweepArgs::New() const {
  return new FullSweepArgs;
}

void FullSweepArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_assayconfig()) {
      if (assayconfig_ != NULL) assayconfig_->::ib::ffi::compute::v3_3_0::AssayConfiguration::Clear();
    }
  }
  convertedsamples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullSweepArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ib.ffi.compute.v3_3_0.AssayConfiguration assayConfig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assayconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_convertedSamples;
        break;
      }
      
      // repeated .ib.ffi.compute.v3_3_0.ConvertedSample convertedSamples = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convertedSamples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_convertedsamples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_convertedSamples;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FullSweepArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ib.ffi.compute.v3_3_0.AssayConfiguration assayConfig = 1;
  if (has_assayconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assayconfig(), output);
  }
  
  // repeated .ib.ffi.compute.v3_3_0.ConvertedSample convertedSamples = 2;
  for (int i = 0; i < this->convertedsamples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->convertedsamples(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FullSweepArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ib.ffi.compute.v3_3_0.AssayConfiguration assayConfig = 1;
  if (has_assayconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assayconfig(), target);
  }
  
  // repeated .ib.ffi.compute.v3_3_0.ConvertedSample convertedSamples = 2;
  for (int i = 0; i < this->convertedsamples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->convertedsamples(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FullSweepArgs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ib.ffi.compute.v3_3_0.AssayConfiguration assayConfig = 1;
    if (has_assayconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assayconfig());
    }
    
  }
  // repeated .ib.ffi.compute.v3_3_0.ConvertedSample convertedSamples = 2;
  total_size += 1 * this->convertedsamples_size();
  for (int i = 0; i < this->convertedsamples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->convertedsamples(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullSweepArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullSweepArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullSweepArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullSweepArgs::MergeFrom(const FullSweepArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  convertedsamples_.MergeFrom(from.convertedsamples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assayconfig()) {
      mutable_assayconfig()->::ib::ffi::compute::v3_3_0::AssayConfiguration::MergeFrom(from.assayconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullSweepArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullSweepArgs::CopyFrom(const FullSweepArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullSweepArgs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_assayconfig()) {
    if (!this->assayconfig().IsInitialized()) return false;
  }
  for (int i = 0; i < convertedsamples_size(); i++) {
    if (!this->convertedsamples(i).IsInitialized()) return false;
  }
  return true;
}

void FullSweepArgs::Swap(FullSweepArgs* other) {
  if (other != this) {
    std::swap(assayconfig_, other->assayconfig_);
    convertedsamples_.Swap(&other->convertedsamples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullSweepArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullSweepArgs_descriptor_;
  metadata.reflection = FullSweepArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FullSweepResult::kQuantitatedSamplesFieldNumber;
#endif  // !_MSC_VER

FullSweepResult::FullSweepResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FullSweepResult::InitAsDefaultInstance() {
}

FullSweepResult::FullSweepResult(const FullSweepResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FullSweepResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullSweepResult::~FullSweepResult() {
  SharedDtor();
}

void FullSweepResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FullSweepResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullSweepResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullSweepResult_descriptor_;
}

const FullSweepResult& FullSweepResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();  return *default_instance_;
}

FullSweepResult* FullSweepResult::default_instance_ = NULL;

FullSweepResult* FullSweepResult::New() const {
  return new FullSweepResult;
}

void FullSweepResult::Clear() {
  quantitatedsamples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullSweepResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ib.ffi.compute.v3_3_0.QuantitatedSample quantitatedSamples = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quantitatedSamples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quantitatedsamples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quantitatedSamples;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FullSweepResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedSample quantitatedSamples = 1;
  for (int i = 0; i < this->quantitatedsamples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quantitatedsamples(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FullSweepResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedSample quantitatedSamples = 1;
  for (int i = 0; i < this->quantitatedsamples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quantitatedsamples(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FullSweepResult::ByteSize() const {
  int total_size = 0;
  
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedSample quantitatedSamples = 1;
  total_size += 1 * this->quantitatedsamples_size();
  for (int i = 0; i < this->quantitatedsamples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quantitatedsamples(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullSweepResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullSweepResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullSweepResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullSweepResult::MergeFrom(const FullSweepResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  quantitatedsamples_.MergeFrom(from.quantitatedsamples_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullSweepResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullSweepResult::CopyFrom(const FullSweepResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullSweepResult::IsInitialized() const {
  
  for (int i = 0; i < quantitatedsamples_size(); i++) {
    if (!this->quantitatedsamples(i).IsInitialized()) return false;
  }
  return true;
}

void FullSweepResult::Swap(FullSweepResult* other) {
  if (other != this) {
    quantitatedsamples_.Swap(&other->quantitatedsamples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullSweepResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullSweepResult_descriptor_;
  metadata.reflection = FullSweepResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssayConfiguration::kNameFieldNumber;
#endif  // !_MSC_VER

AssayConfiguration::AssayConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssayConfiguration::InitAsDefaultInstance() {
}

AssayConfiguration::AssayConfiguration(const AssayConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssayConfiguration::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssayConfiguration::~AssayConfiguration() {
  SharedDtor();
}

void AssayConfiguration::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AssayConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssayConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssayConfiguration_descriptor_;
}

const AssayConfiguration& AssayConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();  return *default_instance_;
}

AssayConfiguration* AssayConfiguration::default_instance_ = NULL;

AssayConfiguration* AssayConfiguration::New() const {
  return new AssayConfiguration;
}

void AssayConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssayConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssayConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssayConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssayConfiguration::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssayConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssayConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssayConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssayConfiguration::MergeFrom(const AssayConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssayConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssayConfiguration::CopyFrom(const AssayConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssayConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AssayConfiguration::Swap(AssayConfiguration* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssayConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssayConfiguration_descriptor_;
  metadata.reflection = AssayConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuantitatedSample::kIdFieldNumber;
const int QuantitatedSample::kNameFieldNumber;
const int QuantitatedSample::kUniqueIdFieldNumber;
const int QuantitatedSample::kQuantitatedCompoundsFieldNumber;
#endif  // !_MSC_VER

QuantitatedSample::QuantitatedSample()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuantitatedSample::InitAsDefaultInstance() {
}

QuantitatedSample::QuantitatedSample(const QuantitatedSample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuantitatedSample::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unique_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuantitatedSample::~QuantitatedSample() {
  SharedDtor();
}

void QuantitatedSample::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (unique_id_ != &::google::protobuf::internal::kEmptyString) {
    delete unique_id_;
  }
  if (this != default_instance_) {
  }
}

void QuantitatedSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuantitatedSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuantitatedSample_descriptor_;
}

const QuantitatedSample& QuantitatedSample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();  return *default_instance_;
}

QuantitatedSample* QuantitatedSample::default_instance_ = NULL;

QuantitatedSample* QuantitatedSample::New() const {
  return new QuantitatedSample;
}

void QuantitatedSample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_unique_id()) {
      if (unique_id_ != &::google::protobuf::internal::kEmptyString) {
        unique_id_->clear();
      }
    }
  }
  quantitatedcompounds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuantitatedSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unique_id;
        break;
      }
      
      // required string unique_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unique_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unique_id().data(), this->unique_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quantitatedCompounds;
        break;
      }
      
      // repeated .ib.ffi.compute.v3_3_0.QuantitatedCompound quantitatedCompounds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quantitatedCompounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quantitatedcompounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quantitatedCompounds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuantitatedSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string unique_id = 3;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unique_id().data(), this->unique_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->unique_id(), output);
  }
  
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedCompound quantitatedCompounds = 4;
  for (int i = 0; i < this->quantitatedcompounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->quantitatedcompounds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuantitatedSample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string unique_id = 3;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unique_id().data(), this->unique_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unique_id(), target);
  }
  
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedCompound quantitatedCompounds = 4;
  for (int i = 0; i < this->quantitatedcompounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->quantitatedcompounds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuantitatedSample::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string unique_id = 3;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unique_id());
    }
    
  }
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedCompound quantitatedCompounds = 4;
  total_size += 1 * this->quantitatedcompounds_size();
  for (int i = 0; i < this->quantitatedcompounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quantitatedcompounds(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuantitatedSample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuantitatedSample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuantitatedSample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuantitatedSample::MergeFrom(const QuantitatedSample& from) {
  GOOGLE_CHECK_NE(&from, this);
  quantitatedcompounds_.MergeFrom(from.quantitatedcompounds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuantitatedSample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantitatedSample::CopyFrom(const QuantitatedSample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantitatedSample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < quantitatedcompounds_size(); i++) {
    if (!this->quantitatedcompounds(i).IsInitialized()) return false;
  }
  return true;
}

void QuantitatedSample::Swap(QuantitatedSample* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(unique_id_, other->unique_id_);
    quantitatedcompounds_.Swap(&other->quantitatedcompounds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuantitatedSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuantitatedSample_descriptor_;
  metadata.reflection = QuantitatedSample_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuantitatedCompound::kIdFieldNumber;
const int QuantitatedCompound::kNameFieldNumber;
const int QuantitatedCompound::kQuantitatedChromatogramsFieldNumber;
#endif  // !_MSC_VER

QuantitatedCompound::QuantitatedCompound()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuantitatedCompound::InitAsDefaultInstance() {
}

QuantitatedCompound::QuantitatedCompound(const QuantitatedCompound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuantitatedCompound::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuantitatedCompound::~QuantitatedCompound() {
  SharedDtor();
}

void QuantitatedCompound::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QuantitatedCompound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuantitatedCompound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuantitatedCompound_descriptor_;
}

const QuantitatedCompound& QuantitatedCompound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();  return *default_instance_;
}

QuantitatedCompound* QuantitatedCompound::default_instance_ = NULL;

QuantitatedCompound* QuantitatedCompound::New() const {
  return new QuantitatedCompound;
}

void QuantitatedCompound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  quantitatedchromatograms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuantitatedCompound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quantitatedChromatograms;
        break;
      }
      
      // repeated .ib.ffi.compute.v3_3_0.QuantitatedChromatogram quantitatedChromatograms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quantitatedChromatograms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quantitatedchromatograms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quantitatedChromatograms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuantitatedCompound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedChromatogram quantitatedChromatograms = 3;
  for (int i = 0; i < this->quantitatedchromatograms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quantitatedchromatograms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuantitatedCompound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedChromatogram quantitatedChromatograms = 3;
  for (int i = 0; i < this->quantitatedchromatograms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quantitatedchromatograms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuantitatedCompound::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .ib.ffi.compute.v3_3_0.QuantitatedChromatogram quantitatedChromatograms = 3;
  total_size += 1 * this->quantitatedchromatograms_size();
  for (int i = 0; i < this->quantitatedchromatograms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quantitatedchromatograms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuantitatedCompound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuantitatedCompound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuantitatedCompound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuantitatedCompound::MergeFrom(const QuantitatedCompound& from) {
  GOOGLE_CHECK_NE(&from, this);
  quantitatedchromatograms_.MergeFrom(from.quantitatedchromatograms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuantitatedCompound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantitatedCompound::CopyFrom(const QuantitatedCompound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantitatedCompound::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < quantitatedchromatograms_size(); i++) {
    if (!this->quantitatedchromatograms(i).IsInitialized()) return false;
  }
  return true;
}

void QuantitatedCompound::Swap(QuantitatedCompound* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    quantitatedchromatograms_.Swap(&other->quantitatedchromatograms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuantitatedCompound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuantitatedCompound_descriptor_;
  metadata.reflection = QuantitatedCompound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuantitatedChromatogram::kIdFieldNumber;
const int QuantitatedChromatogram::kNameFieldNumber;
#endif  // !_MSC_VER

QuantitatedChromatogram::QuantitatedChromatogram()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuantitatedChromatogram::InitAsDefaultInstance() {
}

QuantitatedChromatogram::QuantitatedChromatogram(const QuantitatedChromatogram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuantitatedChromatogram::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuantitatedChromatogram::~QuantitatedChromatogram() {
  SharedDtor();
}

void QuantitatedChromatogram::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QuantitatedChromatogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuantitatedChromatogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuantitatedChromatogram_descriptor_;
}

const QuantitatedChromatogram& QuantitatedChromatogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();  return *default_instance_;
}

QuantitatedChromatogram* QuantitatedChromatogram::default_instance_ = NULL;

QuantitatedChromatogram* QuantitatedChromatogram::New() const {
  return new QuantitatedChromatogram;
}

void QuantitatedChromatogram::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuantitatedChromatogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuantitatedChromatogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuantitatedChromatogram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuantitatedChromatogram::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuantitatedChromatogram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuantitatedChromatogram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuantitatedChromatogram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuantitatedChromatogram::MergeFrom(const QuantitatedChromatogram& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuantitatedChromatogram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantitatedChromatogram::CopyFrom(const QuantitatedChromatogram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantitatedChromatogram::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QuantitatedChromatogram::Swap(QuantitatedChromatogram* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuantitatedChromatogram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuantitatedChromatogram_descriptor_;
  metadata.reflection = QuantitatedChromatogram_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvertedSample::kIdFieldNumber;
const int ConvertedSample::kUniqueIdFieldNumber;
const int ConvertedSample::kConvertedChromatogramsFieldNumber;
#endif  // !_MSC_VER

ConvertedSample::ConvertedSample()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvertedSample::InitAsDefaultInstance() {
}

ConvertedSample::ConvertedSample(const ConvertedSample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvertedSample::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unique_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvertedSample::~ConvertedSample() {
  SharedDtor();
}

void ConvertedSample::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (unique_id_ != &::google::protobuf::internal::kEmptyString) {
    delete unique_id_;
  }
  if (this != default_instance_) {
  }
}

void ConvertedSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvertedSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvertedSample_descriptor_;
}

const ConvertedSample& ConvertedSample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();  return *default_instance_;
}

ConvertedSample* ConvertedSample::default_instance_ = NULL;

ConvertedSample* ConvertedSample::New() const {
  return new ConvertedSample;
}

void ConvertedSample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_unique_id()) {
      if (unique_id_ != &::google::protobuf::internal::kEmptyString) {
        unique_id_->clear();
      }
    }
  }
  convertedchromatograms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvertedSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unique_id;
        break;
      }
      
      // required string unique_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unique_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unique_id().data(), this->unique_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_convertedChromatograms;
        break;
      }
      
      // repeated .ib.ffi.compute.v3_3_0.ConvertedChromatogram convertedChromatograms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convertedChromatograms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_convertedchromatograms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_convertedChromatograms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvertedSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string unique_id = 2;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unique_id().data(), this->unique_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unique_id(), output);
  }
  
  // repeated .ib.ffi.compute.v3_3_0.ConvertedChromatogram convertedChromatograms = 3;
  for (int i = 0; i < this->convertedchromatograms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->convertedchromatograms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvertedSample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string unique_id = 2;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unique_id().data(), this->unique_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unique_id(), target);
  }
  
  // repeated .ib.ffi.compute.v3_3_0.ConvertedChromatogram convertedChromatograms = 3;
  for (int i = 0; i < this->convertedchromatograms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->convertedchromatograms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvertedSample::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string unique_id = 2;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unique_id());
    }
    
  }
  // repeated .ib.ffi.compute.v3_3_0.ConvertedChromatogram convertedChromatograms = 3;
  total_size += 1 * this->convertedchromatograms_size();
  for (int i = 0; i < this->convertedchromatograms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->convertedchromatograms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvertedSample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvertedSample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvertedSample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvertedSample::MergeFrom(const ConvertedSample& from) {
  GOOGLE_CHECK_NE(&from, this);
  convertedchromatograms_.MergeFrom(from.convertedchromatograms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvertedSample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertedSample::CopyFrom(const ConvertedSample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertedSample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < convertedchromatograms_size(); i++) {
    if (!this->convertedchromatograms(i).IsInitialized()) return false;
  }
  return true;
}

void ConvertedSample::Swap(ConvertedSample* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unique_id_, other->unique_id_);
    convertedchromatograms_.Swap(&other->convertedchromatograms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvertedSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvertedSample_descriptor_;
  metadata.reflection = ConvertedSample_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvertedChromatogram::kIdFieldNumber;
const int ConvertedChromatogram::kPrecursorFieldNumber;
const int ConvertedChromatogram::kProductFieldNumber;
const int ConvertedChromatogram::kPolarityFieldNumber;
const int ConvertedChromatogram::kCollisionEnergyFieldNumber;
#endif  // !_MSC_VER

ConvertedChromatogram::ConvertedChromatogram()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvertedChromatogram::InitAsDefaultInstance() {
}

ConvertedChromatogram::ConvertedChromatogram(const ConvertedChromatogram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvertedChromatogram::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  precursor_ = 0;
  product_ = 0;
  polarity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collisionenergy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvertedChromatogram::~ConvertedChromatogram() {
  SharedDtor();
}

void ConvertedChromatogram::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (polarity_ != &::google::protobuf::internal::kEmptyString) {
    delete polarity_;
  }
  if (this != default_instance_) {
  }
}

void ConvertedChromatogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvertedChromatogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvertedChromatogram_descriptor_;
}

const ConvertedChromatogram& ConvertedChromatogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ib_2fffi_2fcompute_2fv3_5f3_5f0_2fcompute_2eproto();  return *default_instance_;
}

ConvertedChromatogram* ConvertedChromatogram::default_instance_ = NULL;

ConvertedChromatogram* ConvertedChromatogram::New() const {
  return new ConvertedChromatogram;
}

void ConvertedChromatogram::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    precursor_ = 0;
    product_ = 0;
    if (has_polarity()) {
      if (polarity_ != &::google::protobuf::internal::kEmptyString) {
        polarity_->clear();
      }
    }
    collisionenergy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvertedChromatogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_precursor;
        break;
      }
      
      // optional double precursor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precursor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precursor_)));
          set_has_precursor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_product;
        break;
      }
      
      // required double product = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_product:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &product_)));
          set_has_product();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_polarity;
        break;
      }
      
      // required string polarity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polarity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_polarity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->polarity().data(), this->polarity().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_collisionEnergy;
        break;
      }
      
      // optional double collisionEnergy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_collisionEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collisionenergy_)));
          set_has_collisionenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvertedChromatogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional double precursor = 2;
  if (has_precursor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->precursor(), output);
  }
  
  // required double product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->product(), output);
  }
  
  // required string polarity = 4;
  if (has_polarity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarity().data(), this->polarity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->polarity(), output);
  }
  
  // optional double collisionEnergy = 5;
  if (has_collisionenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->collisionenergy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvertedChromatogram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional double precursor = 2;
  if (has_precursor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->precursor(), target);
  }
  
  // required double product = 3;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->product(), target);
  }
  
  // required string polarity = 4;
  if (has_polarity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polarity().data(), this->polarity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->polarity(), target);
  }
  
  // optional double collisionEnergy = 5;
  if (has_collisionenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->collisionenergy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvertedChromatogram::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional double precursor = 2;
    if (has_precursor()) {
      total_size += 1 + 8;
    }
    
    // required double product = 3;
    if (has_product()) {
      total_size += 1 + 8;
    }
    
    // required string polarity = 4;
    if (has_polarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->polarity());
    }
    
    // optional double collisionEnergy = 5;
    if (has_collisionenergy()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvertedChromatogram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvertedChromatogram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvertedChromatogram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvertedChromatogram::MergeFrom(const ConvertedChromatogram& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_precursor()) {
      set_precursor(from.precursor());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_polarity()) {
      set_polarity(from.polarity());
    }
    if (from.has_collisionenergy()) {
      set_collisionenergy(from.collisionenergy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvertedChromatogram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertedChromatogram::CopyFrom(const ConvertedChromatogram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertedChromatogram::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void ConvertedChromatogram::Swap(ConvertedChromatogram* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(precursor_, other->precursor_);
    std::swap(product_, other->product_);
    std::swap(polarity_, other->polarity_);
    std::swap(collisionenergy_, other->collisionenergy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvertedChromatogram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvertedChromatogram_descriptor_;
  metadata.reflection = ConvertedChromatogram_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3_3_0
}  // namespace compute
}  // namespace ffi
}  // namespace ib

// @@protoc_insertion_point(global_scope)
